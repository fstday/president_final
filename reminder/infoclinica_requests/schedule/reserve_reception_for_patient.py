import os
import django
import logging
import requests
import json
import xml.etree.ElementTree as ET
from datetime import datetime
from django.http import JsonResponse
from dotenv import load_dotenv

from reminder.infoclinica_requests.schedule.doct_schedule_free import check_day_has_free_slots
from reminder.infoclinica_requests.schedule.schedule_rec_reserve import schedule_rec_reserve
from reminder.infoclinica_requests.utils import compare_times_for_redis, compare_times, format_doctor_name
from reminder.models import Patient, Appointment, QueueInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger = logging.getLogger(__name__)
load_dotenv()

infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')
infoclinica_x_forwarded_host = os.getenv('INFOCLINICA_HOST')

# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, 'certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')


def reserve_reception_for_patient(patient_id, date_from_patient, trigger_id):
    """
    –ó–∞–ø–∏—Å—å/–ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–∏–µ–º–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω.

    Args:
        patient_id (str/int): –ö–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        date_from_patient (str): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM
        trigger_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                          1 - —Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                          2 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
                          3 - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω

    Returns:
        dict/JsonResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    """
    from reminder.openai_assistant.api_views import get_date_relation

    logger.info(f"üöÄ Starting reserve_reception_for_patient with patient_id={patient_id}, "
                f"date_from_patient={date_from_patient}, trigger_id={trigger_id}")

    doctor_id = None  # Initialize variable to avoid potential reference errors
    target_filial_id = 1  # Default value

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã+–≤—Ä–µ–º–µ–Ω–∏
        date_parts = date_from_patient.split()
        date_only = date_parts[0] if len(date_parts) > 0 else None

        if date_only:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            day_check = check_day_has_free_slots(patient_id, date_only)

            # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not day_check.get('has_slots', False):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∞—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
                date_obj = datetime.strptime(date_only, '%Y-%m-%d')
                relation = get_date_relation(date_obj)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤
                if relation == "today":
                    return {"status": "error_empty_windows_today",
                            "message": "–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "day": "—Å–µ–≥–æ–¥–Ω—è", "day_kz": "–±“Ø–≥—ñ–Ω"}
                elif relation == "tomorrow":
                    return {"status": "error_empty_windows_tomorrow",
                            "message": "–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "day": "–∑–∞–≤—Ç—Ä–∞", "day_kz": "–µ—Ä—Ç–µ“£"}
                else:
                    return {"status": "error_empty_windows", "message": f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –Ω–∞ {date_only} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É, –∫–æ–≥–¥–∞ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        try:
            found_patient = Patient.objects.get(patient_code=patient_id)
            # Look for active appointment
            existing_appointment = Appointment.objects.filter(
                patient=found_patient,
                is_active=True,
                is_infoclinica_id=True  # If this is a record from Infoclinica
            ).first()
            is_reschedule = existing_appointment is not None
            schedid = existing_appointment.appointment_id if is_reschedule else None

            # Find the latest appointment for this patient
            latest_appointment = Appointment.objects.filter(
                patient=found_patient,
                is_active=True
            ).order_by('-created_at').first()

            if latest_appointment:
                # Get doctor code from Doctor model
                if latest_appointment.doctor:
                    doctor_id = latest_appointment.doctor.doctor_code
                    print(f"Doctor ID from appointment: {doctor_id}")
                else:
                    # If no doctor in Appointment model, try to get from QueueInfo
                    latest_queue = QueueInfo.objects.filter(
                        patient=found_patient
                    ).order_by('-created_at').first()

                    if latest_queue and latest_queue.doctor_code:
                        doctor_id = latest_queue.doctor_code
                        print(f"Doctor ID from queue: {doctor_id}")
                    else:
                        print("‚ö†Ô∏è No doctor_code found")
                        return {
                            'status': 'error',
                            'message': 'Doctor code not found for this patient'
                        }

                # Get target clinic from Appointment model
                if latest_appointment.clinic:
                    target_filial_id = latest_appointment.clinic.clinic_id
                    print(f"Target clinic ID from appointment: {target_filial_id}")
                else:
                    # If no clinic in Appointment model, try to get from QueueInfo
                    latest_queue = QueueInfo.objects.filter(
                        patient=found_patient
                    ).order_by('-created_at').first()

                    if latest_queue and latest_queue.target_branch:
                        target_filial_id = latest_queue.target_branch.clinic_id
                        print(f"Target clinic ID from queue: {target_filial_id}")
                    else:
                        target_filial_id = 1  # Default value
                        print(f"Using default target clinic ID: {target_filial_id}")
            else:
                # If no appointments in Appointment model, try to find from QueueInfo
                latest_queue = QueueInfo.objects.filter(
                    patient=found_patient
                ).order_by('-created_at').first()

                if latest_queue:
                    if latest_queue.doctor_code:
                        doctor_id = latest_queue.doctor_code
                        print(f"Doctor ID from queue: {doctor_id}")
                    else:
                        print("‚ö†Ô∏è No doctor_code found in queue")
                        return {
                            'status': 'error',
                            'message': 'No doctor code found for this patient'
                        }

                    if latest_queue.target_branch:
                        target_filial_id = latest_queue.target_branch.clinic_id
                        print(f"Target clinic ID from queue: {target_filial_id}")
                    else:
                        target_filial_id = 1  # Default value
                        print(f"Using default target clinic ID: {target_filial_id}")
                else:
                    print("‚ö†Ô∏è No appointments or queue entries found for this patient")
                    return {
                        'status': 'error',
                        'message': 'No records found for this patient'
                    }

            # Final check for doctor_id
            if not doctor_id:
                return {
                    'status': 'error',
                    'message': 'Unable to determine doctor ID'
                }

        except Patient.DoesNotExist:
            print(f"‚ùå Patient with ID {patient_id} not found")
            return {"status": "error", "message": f"Patient with ID {patient_id} not found"}
        except Exception as e:
            print(f"‚ùå Exception occurred: {str(e)}")
            return {"status": "error", "message": f"Error: {str(e)}"}

        # Parse dates for XML request
        if isinstance(date_from_patient, str):
            try:
                date_part, time_part = date_from_patient.split()
                year, month, day = map(int, date_part.split('-'))
                hour, minute = map(int, time_part.split(':'))
                date_obj = datetime(year, month, day, hour, minute)
            except ValueError as e:
                return {"status": "error", "message": f"Invalid date format: {str(e)}"}
        elif isinstance(date_from_patient, datetime):
            date_obj = date_from_patient
            date_part = date_obj.strftime('%Y-%m-%d')
            time_part = date_obj.strftime('%H:%M')
        else:
            return {"status": "error", "message": "Invalid date type"}

        beginning_formatted_date = date_obj.strftime('%Y%m%d')
        time_obj = date_obj.time()

        logger.info(f'formatted_date: {beginning_formatted_date}')
        logger.info(f'date_part: {date_part}, time_part: {time_part}')

        if found_patient:
            logger.info(f'–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID: {found_patient}')

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}',
                'Content-Type': 'text/xml'
            }

            # XML –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
            xml_request = f'''
            <WEB_SCHEDULE xmlns="http://sdsys.ru/">
              <MSH>
                <MSH.3></MSH.3>
                <MSH.7>
                  <TS.1>{datetime.now().strftime('%Y%m%d%H%M')}</TS.1>
                </MSH.7>
                <MSH.9>
                  <MSG.1>WEB</MSG.1>
                  <MSG.2>SCHEDULE</MSG.2>
                </MSH.9>
                <MSH.10>f2e89dbc1e813cb680d2f847</MSH.10>
                <MSH.18>UTF-8</MSH.18>
                <MSH.99>{target_filial_id}</MSH.99>
              </MSH>
              <SCHEDULE_IN>
                <INDOCTLIST>{doctor_id}</INDOCTLIST>
                <BDATE>{beginning_formatted_date}</BDATE>
                <FDATE>{beginning_formatted_date}</FDATE>
                <EXTINTERV>30</EXTINTERV> <!-- —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞! -->
                <SCHLIST/>
              </SCHEDULE_IN>
            </WEB_SCHEDULE>
            '''

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞
            response = requests.post(
                url=infoclinica_api_url,
                headers=headers,
                data=xml_request,
                cert=(cert_file_path, key_file_path)
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if response.status_code == 200:
                root = ET.fromstring(response.text)
                namespace = {'ns': 'http://sdsys.ru/'}

                free_time_intervals = []
                schedint = root.find('.//ns:SCHEDINT', namespace)
                schedident_text = schedint.find('ns:SCHEDIDENT', namespace).text if schedint is not None else None

                for interval in root.findall('.//ns:INTERVAL', namespace):
                    bhour = interval.find('ns:BHOUR', namespace).text
                    bmin = interval.find('ns:BMIN', namespace).text
                    fhour = interval.find('ns:FHOUR', namespace).text
                    fmin = interval.find('ns:FMIN', namespace).text
                    freetype = interval.find('ns:FREETYPE', namespace).text

                    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    logger.info(
                        f"Parsed interval: BHOUR={bhour}, BMIN={bmin}, FHOUR={fhour}, FMIN={fmin}, FREETYPE={freetype}")

                    if freetype == '1':  # –¢–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                        start_time = f"{bhour}:{bmin.zfill(2)}"
                        end_time = f"{fhour}:{fmin.zfill(2)}"
                        free_time_intervals.append({"start_time": start_time, "end_time": end_time})

                logger.info("–°–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
                logger.info(free_time_intervals)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è trigger_id == 2
                if trigger_id == 2:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö
                    result_times = compare_times_for_redis(free_time_intervals, time_obj, date_part)

                    answer = {
                        'status': 'suggest_times',
                        'suggested_times': result_times,
                        'message': f'–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {date_from_patient} –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞',
                        'action': 'reserve',
                        'specialist_name': format_doctor_name(patient_id)
                    }

                    logger.info(answer)
                    return answer

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è trigger_id == 1
                elif trigger_id == 1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
                    result_time = compare_times(free_time_intervals, time_obj, date_part)

                    # –ï—Å–ª–∏ result_time - —Å–ø–∏—Å–æ–∫ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞)
                    if isinstance(result_time, list):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                        exact_match = f"{date_part} {time_obj.strftime('%H:%M')}"
                        if exact_match in result_time:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                            logger.info(f'Found exact match for requested time: {exact_match}')
                            return schedule_rec_reserve(
                                result_time=exact_match,
                                doctor_id=doctor_id,
                                date_part=date_part,
                                patient_id=patient_id,
                                date_obj=date_obj,
                                schedident_text=schedident_text,
                                free_intervals=free_time_intervals,
                                is_reschedule=is_reschedule,
                                schedid=schedid
                            )
                        else:
                            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
                            answer = {
                                'status': 'suggest_times',
                                'suggested_times': result_time,
                                'message': f'–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {date_from_patient} –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞',
                                'action': 'reserve',
                                'specialist_name': format_doctor_name(patient_id)
                            }

                            logger.info(answer)
                            return answer
                    # –ï—Å–ª–∏ result_time - —Å—Ç—Ä–æ–∫–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ)
                    elif result_time:
                        logger.info(f'Found suitable time {result_time}')

                        return schedule_rec_reserve(
                            result_time=result_time,
                            doctor_id=doctor_id,
                            date_part=date_part,
                            patient_id=patient_id,
                            date_obj=date_obj,
                            schedident_text=schedident_text,
                            free_intervals=free_time_intervals,
                            is_reschedule=is_reschedule,
                            schedid=schedid
                        )
                    else:
                        logger.info('–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                        answer = {
                            'message': f'–ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                        }
                        return answer

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è trigger_id == 3 (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
                elif trigger_id == 3:
                    # –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞
                    # –í —Ñ–æ—Ä–º–∞—Ç–µ: ['2025-03-19 09:30', '2025-03-19 10:00', ...]
                    result_times = []
                    for interval in free_time_intervals:
                        start_time = interval["start_time"]
                        time_hour, time_min = map(int, start_time.split(':'))
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–æ 9:00 –∏ –ø–æ—Å–ª–µ 21:00
                        if (time_hour < 9) or (time_hour >= 21):
                            continue
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–∞—Ç–æ–π
                        formatted_time = f"{date_part} {start_time}"
                        result_times.append(formatted_time)

                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ 3: {result_times}")
                    return result_times
            else:
                logger.info('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', response.status_code)
                logger.info('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.text)
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}'
                }

        else:
            logger.info('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return {
                'status': 'error',
                'message': '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reserve_reception_for_patient: {e}", exc_info=True)
        return {"status": "error_med_element", "message": str(e)}
