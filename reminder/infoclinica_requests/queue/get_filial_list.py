import os
import django
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

from dotenv import load_dotenv
from datetime import datetime
from reminder.models import *
from reminder.utils.utils import generate_msh_10
from django.utils.dateparse import parse_date
from django.db import transaction

import requests
import logging
import xml.etree.ElementTree as ET
import pytz
from datetime import datetime, timedelta

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')
infoclinica_x_forwarded_host = os.getenv('INFOCLINICA_HOST')

# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, '../old_integration/certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')


def get_filial_list():
    """
    –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤.
    """

    try:
        ts_1 = datetime.now().strftime("%Y%m%d%H%M%S")
        msh_10 = generate_msh_10()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï queue_id –∏ patient_code –∏–∑ QueueInfo
        queue_entries = QueueInfo.objects.all().values_list("queue_id", "patient__patient_code")

        if not queue_entries:
            logger.info("‚ùó –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo: {len(queue_entries)}")

        for queue_id, patient_code in queue_entries:
            if not patient_code:
                logger.warning(f"‚ö† –û—á–µ—Ä–µ–¥—å {queue_id} –Ω–µ –∏–º–µ–µ—Ç `patient_code`, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º XML-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            xml_request = f'''
            <WEB_GET_FILIAL_LIST xmlns="http://sdsys.ru/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://sdsys.ru/">
              <MSH>

                <MSH.7>
                  <TS.1>{ts_1}</TS.1>
                </MSH.7>

                <MSH.9>
                  <MSG.1>WEB</MSG.1>
                  <MSG.2>GET_FILIAL_LIST</MSG.2>
                </MSH.9>
                <MSH.10>{msh_10}</MSH.10>
                <MSH.18>UTF-8</MSH.18>
              </MSH>
              <GET_FILIAL_LIST_IN>
                <FILLIST>-1</FILLIST>
                <VIEWINWEB>-1</VIEWINWEB>
                <IGNORESHOWCASHREF>1</IGNORESHOWCASHREF>
              </GET_FILIAL_LIST_IN>
            </WEB_GET_FILIAL_LIST>
            '''

            logger.info(
                f"\n\n---------------\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ CLIENT_INFO –¥–ª—è PCODE {patient_code}: \n{xml_request}\n---------------\n")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                url=infoclinica_api_url,
                headers={'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}', 'Content-Type': 'text/xml'},
                data=xml_request,
                cert=(cert_file_path, key_file_path),
                verify=True
            )

            if response.status_code == 200:
                logger.info(
                    f"\n\n---------------\n–û—Ç–≤–µ—Ç –æ—Ç CLIENT_INFO –¥–ª—è PCODE {patient_code}: {response.text}\n---------------\n")
                print_filials(response.text)
                save_filials_to_db(response.text)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–ª–∏–∞–ª–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_queue: {e}")


def print_filials(xml_response):
    """
    –ü—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–ª–∏–∞–ª—ã –∏–∑ XML-–æ—Ç–≤–µ—Ç–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    import xml.etree.ElementTree as ET

    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ò—â–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ
        filials = root.findall(".//ns:GET_FILIAL_LIST_OUT/ns:GETFILIALLIST", namespace)
        if not filials:
            print("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return

        print(f"\n{'=' * 80}")
        print(f"–°–ü–ò–°–û–ö –§–ò–õ–ò–ê–õ–û–í (–≤—Å–µ–≥–æ {len(filials)}):")
        print(f"{'=' * 80}")

        for filial in filials:
            filial_id = filial.find("ns:FILIAL", namespace).text
            filial_name = filial.find("ns:FNAME", namespace).text if filial.find("ns:FNAME",
                                                                                 namespace) is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ê–¥—Ä–µ—Å
            address_elem = filial.find("ns:FADDR", namespace)
            address = address_elem.text if address_elem is not None else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"

            # –¢–µ–ª–µ—Ñ–æ–Ω
            phone_elem = filial.find("ns:FPHONE", namespace)
            phone = phone_elem.text if phone_elem is not None else "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"

            # –í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
            viewinweb_elem = filial.find("ns:VIEWINWEB_OUT", namespace)
            viewinweb = "–î–∞" if viewinweb_elem is not None and viewinweb_elem.text == "1" else "–ù–µ—Ç"

            # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            timezone_elem = filial.find("ns:TIMEZONE", namespace)
            timezone = f"UTC+{timezone_elem.text}" if timezone_elem is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"

            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            hours_elem = filial.find("ns:WORKHOURS", namespace)
            work_hours = hours_elem.text if hours_elem is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            print(f"\n{'-' * 80}")
            print(f"–§–∏–ª–∏–∞–ª ID: {filial_id} | {filial_name}")
            print(f"–ê–¥—Ä–µ—Å: {address}")
            print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            print(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}")
            print(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ: {viewinweb}")
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_hours}")

        print(f"\n{'=' * 80}\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö: {e}")


def save_filials_to_db(xml_response):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î.
    """
    import xml.etree.ElementTree as ET
    from django.db import transaction
    from reminder.models import Clinic

    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        msa_element = root.find(".//ns:MSA/ns:MSA.1", namespace)
        if msa_element is None or msa_element.text != "AA":
            print("‚ùó –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
            return

        # –ò—â–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ
        filials = root.findall(".//ns:GET_FILIAL_LIST_OUT/ns:GETFILIALLIST", namespace)
        if not filials:
            print("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return

        created_count = 0
        updated_count = 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with transaction.atomic():
            for filial in filials:
                filial_id = int(filial.find("ns:FILIAL", namespace).text)
                filial_name = filial.find("ns:FNAME", namespace).text if filial.find("ns:FNAME",
                                                                                     namespace) is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                address_elem = filial.find("ns:FADDR", namespace)
                address = address_elem.text if address_elem is not None else ""

                phone_elem = filial.find("ns:FPHONE", namespace)
                phone = phone_elem.text if phone_elem is not None else ""

                email_elem = filial.find("ns:FMAIL", namespace)
                email = email_elem.text if email_elem is not None else None

                timezone_elem = filial.find("ns:TIMEZONE", namespace)
                timezone = int(timezone_elem.text) if timezone_elem is not None else 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞ (UTC+3)

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª–∏–∞–ª –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                clinic, created = Clinic.objects.update_or_create(
                    clinic_id=filial_id,
                    defaults={
                        'name': filial_name,
                        'address': address,
                        'phone': phone,
                        'email': email,
                        'timezone': timezone
                    }
                )

                if created:
                    created_count += 1
                else:
                    updated_count += 1

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        return created_count, updated_count

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ –ë–î: {e}")
        return 0, 0


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
if __name__ == "__main__":
    get_filial_list()
