import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

import requests
import logging
import xml.etree.ElementTree as ET
import pytz
import re
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from django.db import transaction
from reminder.models import *

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')
infoclinica_x_forwarded_host=os.getenv('INFOCLINICA_HOST')

# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, 'certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')


def generate_msh_10():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è MSH.10"""
    import uuid
    return uuid.uuid4().hex


def client_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å, –∏–∑–≤–ª–µ–∫–∞–µ—Ç `queue_id` –∏ `patient_code`,
    –∑–∞—Ç–µ–º –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å `CLIENT_INFO` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï queue_id –∏ patient_code –∏–∑ QueueInfo
        queue_entries = QueueInfo.objects.all().values_list("queue_id", "patient__patient_code")

        if not queue_entries:
            logger.info("‚ùó –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo: {len(queue_entries)}")

        for queue_id, patient_code in queue_entries:
            if not patient_code:
                logger.warning(f"‚ö† –û—á–µ—Ä–µ–¥—å {queue_id} –Ω–µ –∏–º–µ–µ—Ç `patient_code`, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π timestamp –∏ MSH.10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            ts_1 = datetime.now().strftime("%Y%m%d%H%M%S")
            msh_10 = generate_msh_10()

            # –§–æ—Ä–º–∏—Ä—É–µ–º XML-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            xml_request = f'''
            <WEB_CLIENT_INFO xmlns="http://sdsys.ru/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://sdsys.ru/">
              <MSH>

                <MSH.7>
                  <TS.1>{ts_1}</TS.1>
                </MSH.7>

                <MSH.9>
                  <MSG.1>WEB</MSG.1>
                  <MSG.2>CLIENT_INFO</MSG.2>
                </MSH.9>
                <MSH.10>{msh_10}</MSH.10>
                <MSH.18>UTF-8</MSH.18>
                <MSH.99>1</MSH.99>
              </MSH>
              <CLIENT_INFO_IN>
                <PCODE>{patient_code}</PCODE>
              </CLIENT_INFO_IN>
            </WEB_CLIENT_INFO>
            '''

            logger.info(
                f"\n\n---------------\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ CLIENT_INFO –¥–ª—è PCODE {patient_code}: \n{xml_request}\n---------------\n")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                url=infoclinica_api_url,
                headers={'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}', 'Content-Type': 'text/xml'},
                data=xml_request,
                cert=(cert_file_path, key_file_path),
                verify=True
            )

            if response.status_code == 200:
                logger.info(
                    f"\n\n---------------\n–û—Ç–≤–µ—Ç –æ—Ç CLIENT_INFO –¥–ª—è PCODE {patient_code}: {response.text}\n---------------\n")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
                if "<CLIENT_MAININFO>" in response.text:
                    parse_and_update_patient_info(response.text)
                elif "<QUEUE_INFO>" in response.text:
                    parse_and_update_queue_info(response.text)
                else:
                    logger.warning(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è PCODE {patient_code}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PCODE {patient_code}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ client_info: {e}", exc_info=True)


def normalize_phone(phone):
    """–£–¥–∞–ª—è–µ—Ç +, –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."""
    if phone:
        return re.sub(r"[^\d]", "", phone)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    return None


def parse_date_string(date_str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ 'YYYYMMDD' –≤ –æ–±—ä–µ–∫—Ç datetime.date
    """
    if date_str and len(date_str) == 8:
        try:
            return datetime.strptime(date_str, "%Y%m%d").date()
        except ValueError:
            return None
    return None


def parse_and_update_queue_info(xml_response):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
    –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—Ç–æ—Ä–∞—Ö.
    """
    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        msa_element = root.find(".//ns:MSA/ns:MSA.1", namespace)
        if msa_element is None or msa_element.text != "AA":
            logger.warning("‚ùó –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–¥: " +
                           (msa_element.text if msa_element is not None else "–ù–µ –Ω–∞–π–¥–µ–Ω"))
            return

        # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info_element = root.find(".//ns:QUEUE_INFO_OUT/ns:QUEUE_INFO", namespace)
        if queue_info_element is None:
            logger.warning("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ QUEUE_INFO, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        queue_id = int(queue_info_element.find("ns:QUEUEID", namespace).text)
        patient_code = int(queue_info_element.find("ns:PCODE", namespace).text)

        # –ò—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        patient, _ = Patient.objects.get_or_create(patient_code=patient_code)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã (ADDID/ADDNAME)
        reason_id_element = queue_info_element.find("ns:ADDID", namespace)
        reason_name_element = queue_info_element.find("ns:ADDNAME", namespace)

        reason = None
        if reason_id_element is not None and reason_id_element.text:
            reason_id = int(reason_id_element.text)
            reason_name = reason_name_element.text if reason_name_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç QueueReason
            reason, created = QueueReason.objects.get_or_create(
                reason_id=reason_id,
                defaults={"reason_name": reason_name}
            )

            if not created and reason.reason_name != reason_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                reason.reason_name = reason_name
                reason.save()

            logger.info(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞'} –ø—Ä–∏—á–∏–Ω–∞: {reason_id} - {reason_name}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ (FILIAL/TOFILIAL)
        branch = None
        target_branch = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞ –∑–≤–æ–Ω–∫–∞ (FILIAL)
        branch_id_element = queue_info_element.find("ns:FILIAL", namespace)
        branch_name_element = queue_info_element.find("ns:FILIALNAME", namespace)

        if branch_id_element is not None and branch_id_element.text:
            branch_id = int(branch_id_element.text)
            branch_name = branch_name_element.text if branch_name_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"

            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–ª–∏–∞–ª
            try:
                branch = Clinic.objects.get(clinic_id=branch_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–Ω–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if branch.name != branch_name and branch_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª":
                    branch.name = branch_name
                    branch.save()
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞: {branch_id} ‚Üí {branch_name}")
            except Clinic.DoesNotExist:
                # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                branch = Clinic.objects.create(
                    clinic_id=branch_id,
                    name=branch_name,
                    address="",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    phone="",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    timezone=3  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (GMT+3 –¥–ª—è –†–æ—Å—Å–∏–∏)
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª: {branch_id} - {branch_name}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (TOFILIAL)
        target_branch_id_element = queue_info_element.find("ns:TOFILIAL", namespace)
        target_branch_name_element = queue_info_element.find("ns:TOFILIALNAME", namespace)

        if target_branch_id_element is not None and target_branch_id_element.text:
            target_branch_id = int(target_branch_id_element.text)
            target_branch_name = target_branch_name_element.text if target_branch_name_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"

            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
            if branch and branch.clinic_id == target_branch_id:
                target_branch = branch
            else:
                # –ò–Ω–∞—á–µ –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª
                try:
                    target_branch = Clinic.objects.get(clinic_id=target_branch_id)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–Ω–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if target_branch.name != target_branch_name and target_branch_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª":
                        target_branch.name = target_branch_name
                        target_branch.save()
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞: {target_branch_id} ‚Üí {target_branch_name}")
                except Clinic.DoesNotExist:
                    # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    target_branch = Clinic.objects.create(
                        clinic_id=target_branch_id,
                        name=target_branch_name,
                        address="",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        phone="",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        timezone=3  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (GMT+3 –¥–ª—è –†–æ—Å—Å–∏–∏)
                    )
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª: {target_branch_id} - {target_branch_name}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—Ç–æ—Ä–µ
        doctor = None
        doctor_code_element = queue_info_element.find("ns:DCODE", namespace)
        doctor_name_element = queue_info_element.find("ns:DNAME", namespace)

        if doctor_code_element is not None and doctor_code_element.text:
            doctor_code = int(doctor_code_element.text)
            doctor_name = doctor_name_element.text if doctor_name_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—Ç–æ—Ä"

            # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞
            doctor, doc_created = Doctor.objects.get_or_create(
                doctor_code=doctor_code,
                defaults={
                    "full_name": doctor_name,
                    "clinic": target_branch  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–Ω–∏–∫—É –¥–æ–∫—Ç–æ—Ä–∞
                }
            )

            if not doc_created and doctor.full_name != doctor_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                doctor.full_name = doctor_name
                doctor.save()
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –¥–æ–∫—Ç–æ—Ä–∞: {doctor_code} ‚Üí {doctor_name}")
            elif doc_created:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—Ç–æ—Ä: {doctor_code} - {doctor_name}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞
            depnum_element = queue_info_element.find("ns:DEPNUM", namespace)
            depname_element = queue_info_element.find("ns:DEPNAME", namespace)

            if depnum_element is not None and depnum_element.text:
                dep_id = int(depnum_element.text)
                dep_name = depname_element.text if depname_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"

                # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
                department, dept_created = Department.objects.get_or_create(
                    department_id=dep_id,
                    defaults={
                        "name": dep_name,
                        "clinic": target_branch
                    }
                )

                if not dept_created and department.name != dep_name:
                    department.name = dep_name
                    department.save()
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {dep_id} ‚Üí {dep_name}")
                elif dept_created:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {dep_id} - {dep_name}")

                # –°–≤—è–∑—ã–≤–∞–µ–º –¥–æ–∫—Ç–æ—Ä–∞ —Å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º
                if doctor.department != department:
                    doctor.department = department
                    doctor.save()
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—Ç–æ—Ä–∞ {doctor_name}: {department.name}")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QueueInfo —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Å–≤—è–∑–µ–π
        queue_data = {
            "patient": patient,
            "reason": reason,
            "branch": branch,
            "target_branch": target_branch,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—Ç–æ—Ä–µ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if doctor:
            queue_data["doctor_code"] = doctor.doctor_code
            queue_data["doctor_name"] = doctor.full_name

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if doctor and doctor.department:
            queue_data["department_number"] = doctor.department.department_id
            queue_data["department_name"] = doctor.department.name

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
        fields_mapping = {
            "CURRENTSTATE": ("current_state", int),
            "CURRENTSTATENAME": ("current_state_name", str),
            "DEFAULTNEXTSTATE": ("default_next_state", int),
            "DEFAULTNEXTSTATENAME": ("default_next_state_name", str),
            "CONTACTBDATE": ("contact_start_date", parse_date_string),
            "CONTACTFDATE": ("contact_end_date", parse_date_string),
            "ACTIONBDATE": ("desired_start_date", parse_date_string),
            "ACTIONFDATE": ("desired_end_date", parse_date_string),
        }

        for xml_field, (model_field, convert_func) in fields_mapping.items():
            element = queue_info_element.find(f"ns:{xml_field}", namespace)
            if element is not None and element.text:
                try:
                    queue_data[model_field] = convert_func(element.text)
                except (ValueError, TypeError) as e:
                    logger.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è {xml_field}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ QueueInfo
        with transaction.atomic():
            queue_obj, created = QueueInfo.objects.update_or_create(
                queue_id=queue_id,
                defaults=queue_data
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—á–µ—Ä–µ–¥–∏
            process_queue_contacts(queue_obj, queue_info_element, namespace)

            if created:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ QueueInfo: {queue_id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.full_name}")
            else:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ QueueInfo: {queue_id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.full_name}")

            # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
            reason_info = f" —Å –ø—Ä–∏—á–∏–Ω–æ–π '{reason.reason_name}'" if reason else " –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
            branch_info = f" –≤ —Ñ–∏–ª–∏–∞–ª–µ '{branch.name}'" if branch else ""
            doctor_info = f" —É –≤—Ä–∞—á–∞ '{doctor.full_name}'" if doctor else ""
            logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏: Queue {queue_id}{reason_info}{branch_info}{doctor_info}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QUEUE_INFO: {e}", exc_info=True)


def process_queue_contacts(queue_obj, queue_info_element, namespace):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∏–∑ XML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î.
    """
    # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contact_list = queue_info_element.find("ns:QUEUE_CONTACT_LIST", namespace)

    if contact_list is None:
        logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_obj.queue_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    contacts = contact_list.findall("ns:QUEUE_CONTACT_INFO", namespace)

    if not contacts:
        logger.info(f"‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_obj.queue_id}")
        return

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
    QueueContactInfo.objects.filter(queue=queue_obj).delete()

    saved_contacts = 0
    contact_summary = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    for contact in contacts:
        contact_data = {
            "queue": queue_obj,
        }

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        next_state_element = contact.find(f"ns:NEXTSTATE", namespace)
        next_state_name_element = contact.find(f"ns:NEXTSTATENAME", namespace)

        if next_state_element is not None and next_state_element.text:
            contact_data["next_state"] = int(next_state_element.text)
            if next_state_name_element is not None:
                contact_data["next_state_name"] = next_state_name_element.text
                contact_summary.append(f"{contact_data['next_state']}: {contact_data['next_state_name']}")

        # –ú–∞–ø–ø–∏–Ω–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
        fields_mapping = {
            "PARENTACTIONID": ("parent_action_id", int),
            "NEXTDCODE": ("next_dcode", int),
            "NEXTDNAME": ("next_dname", str),
            "NEXTCALLDATETIME": ("next_call_datetime", parse_date_string),
        }

        for xml_field, (model_field, convert_func) in fields_mapping.items():
            element = contact.find(f"ns:{xml_field}", namespace)
            if element is not None and element.text:
                try:
                    contact_data[model_field] = convert_func(element.text)
                except (ValueError, TypeError) as e:
                    logger.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {xml_field}: {e}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–î
        QueueContactInfo.objects.create(**contact_data)
        saved_contacts += 1

    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_contacts} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_obj.queue_id}")
    if contact_summary:
        logger.info(f"üìä –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(contact_summary)}")


def parse_and_update_patient_info(xml_response):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç `CLIENT_INFO` –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç `Patient` –≤ –ë–î.
    """
    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        client_info = root.find(".//ns:CLIENT_MAININFO", namespace)
        if client_info is None:
            logger.warning("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CLIENT_MAININFO, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        patient_code = client_info.find("ns:PCODE", namespace).text
        full_name = client_info.find("ns:PNAME", namespace).text if client_info.find("ns:PNAME",
                                                                                     namespace) is not None else "Unknown"
        address = client_info.find("ns:PADDR", namespace).text if client_info.find("ns:PADDR",
                                                                                   namespace) is not None else None
        phone_mobile = client_info.find("ns:PPHONE", namespace).text if client_info.find("ns:PPHONE",
                                                                                         namespace) is not None else None
        email = client_info.find("ns:PMAIL", namespace).text if client_info.find("ns:PMAIL",
                                                                                 namespace) is not None else None
        gender = int(client_info.find("ns:GENDER", namespace).text) if client_info.find("ns:GENDER",
                                                                                        namespace) is not None else None

        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        bdate_element = client_info.find("ns:BDATE", namespace)
        birth_date = parse_date_string(bdate_element.text) if bdate_element is not None else None

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        phone_mobile = normalize_phone(phone_mobile)

        with transaction.atomic():
            patient, created = Patient.objects.update_or_create(
                patient_code=patient_code,
                defaults={
                    "full_name": full_name,
                    "address": address,
                    "phone_mobile": phone_mobile,
                    "email": email,
                    "gender": gender,
                    "birth_date": birth_date
                }
            )

            if created:
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_name} (PCODE {patient_code}), —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_mobile}")
            else:
                logger.info(f"üîÑ –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {full_name} (PCODE {patient_code}), —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_mobile}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CLIENT_INFO: {e}", exc_info=True)


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
if __name__ == "__main__":
    client_info()
