import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

from dotenv import load_dotenv
from datetime import datetime
from reminder.models import *
from reminder.infoclinica_requests.utils import generate_msh_10
from django.utils.dateparse import parse_date
from django.db import transaction

import requests
import logging
import xml.etree.ElementTree as ET
import pytz
from datetime import datetime, timedelta

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')

# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, 'certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')
infoclinica_x_forwarded_host = os.getenv('INFOCLINICA_HOST')


def get_queue():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        ts_1 = datetime.now().strftime("%Y%m%d%H%M%S")
        msh_10 = generate_msh_10()

        # –î–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        today = datetime.now()
        bdate = today.strftime("%Y%m%d")
        fdate = (today + timedelta(days=365)).strftime("%Y%m%d")

        # XML-–∑–∞–ø—Ä–æ—Å
        xml_request = f'''
        <WEB_QUEUE_LIST xmlns="http://sdsys.ru/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://sdsys.ru/">
          <MSH>
            <MSH.7>
              <TS.1>{ts_1}</TS.1>
            </MSH.7>
            <MSH.9>
              <MSG.1>WEB</MSG.1>
              <MSG.2>QUEUE_LIST</MSG.2>
            </MSH.9>
            <MSH.10>{msh_10}</MSH.10>
            <MSH.18>UTF-8</MSH.18>
          </MSH>
          <QUEUE_LIST_IN>
            <BDATE>{bdate}</BDATE>
            <FDATE>{fdate}</FDATE>
            <REMTYPE>2</REMTYPE>
          </QUEUE_LIST_IN>
        </WEB_QUEUE_LIST>
        '''

        logger.info(f"\n\n---------------\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {xml_request}\n---------------\n")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url=infoclinica_api_url,
            headers={'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}', 'Content-Type': 'text/xml'},
            data=xml_request,
            cert=(cert_file_path, key_file_path),
            verify=True
        )

        if response.status_code == 200:
            logger.info(f"\n\n---------------\n–û—Ç–≤–µ—Ç –æ—Ç get_queue: {response.text}\n---------------\n")
            parse_and_save_queue_info(response.text)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_queue: {e}")


def parse_and_save_queue_info(xml_response):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç –æ—Ç API –ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.
    –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–π –∫–ª–∏–Ω–∏–∫–µ (TOFILIAL)
    –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—ë –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        queue_list = root.find(".//ns:QUEUE_LIST", namespace)
        if queue_list is None:
            logger.warning("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ QUEUE_LIST (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å namespace)")
            return

        for queue_info in queue_list.findall("ns:QUEUE_INFO", namespace):
            try:
                queue_id = int(queue_info.find("ns:QUEUEID", namespace).text)
                patient_code = int(queue_info.find("ns:PCODE", namespace).text)

                contact_bdate = queue_info.find("ns:CONTACTBDATE", namespace)
                contact_bdate = parse_date(contact_bdate.text) if contact_bdate is not None else None

                contact_fdate = queue_info.find("ns:CONTACTFDATE", namespace)
                contact_fdate = parse_date(contact_fdate.text) if contact_fdate is not None else None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã (ADDID)
                add_id_element = queue_info.find("ns:ADDID", namespace)
                add_id = int(add_id_element.text) if add_id_element is not None else None

                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç QueueReason
                reason = None
                if add_id is not None:
                    reason, _ = QueueReason.objects.get_or_create(
                        reason_id=add_id,
                        defaults={"reason_name": f"–ü—Ä–∏—á–∏–Ω–∞ {add_id}"}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
                    )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (FILIAL) - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
                # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∏–ª–∏–∞–ª, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ TOFILIAL
                branch = None

                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (TOFILIAL) - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                target_branch = None
                target_branch_id_element = queue_info.find("ns:TOFILIAL", namespace)
                if target_branch_id_element is not None and target_branch_id_element.text:
                    target_branch_id = int(target_branch_id_element.text)
                    target_branch_name_element = queue_info.find("ns:TOFILIALNAME", namespace)
                    target_branch_name = target_branch_name_element.text.strip() if target_branch_name_element is not None else ""

                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª
                    target_branch, created = Clinic.objects.get_or_create(
                        clinic_id=target_branch_id,
                        defaults={
                            "name": target_branch_name,
                            "address": "",
                            "phone": "",
                            "timezone": 0
                        }
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if not created and target_branch.name != target_branch_name and target_branch_name:
                        target_branch.name = target_branch_name
                        target_branch.save()
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞: {target_branch_id} ‚Üí {target_branch_name}")
                    elif created:
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª: {target_branch_id} - {target_branch_name}")

                    logger.info(f"–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—ë–Ω TOFILIAL —Å ID {target_branch_id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_code}")

                if target_branch is None:
                    logger.warning(
                        f"‚ö† –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TOFILIAL –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_code}. –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")

                current_state = queue_info.find("ns:CURRENTSTATE", namespace)
                current_state = int(current_state.text) if current_state is not None else None

                action_bdate = queue_info.find("ns:ACTIONBDATE", namespace)
                action_bdate = parse_date(action_bdate.text) if action_bdate is not None else None

                action_fdate = queue_info.find("ns:ACTIONFDATE", namespace)
                action_fdate = parse_date(action_fdate.text) if action_fdate is not None else None

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—Ç–æ—Ä–µ
                doctor = None
                doctor_code_element = queue_info.find("ns:DCODE", namespace)
                doctor_name_element = queue_info.find("ns:DNAME", namespace)

                if doctor_code_element is not None and doctor_code_element.text:
                    doctor_code = int(doctor_code_element.text)
                    doctor_name = doctor_name_element.text if doctor_name_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—Ç–æ—Ä"

                    # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞
                    doctor, created = Doctor.objects.get_or_create(
                        doctor_code=doctor_code,
                        defaults={
                            "full_name": doctor_name,
                            "clinic": target_branch  # –í–ê–ñ–ù–û: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ü–µ–ª–µ–≤–æ–π –∫–ª–∏–Ω–∏–∫–µ
                        }
                    )

                    if not created and doctor.full_name != doctor_name:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        doctor.full_name = doctor_name
                        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥—Ä—É–≥–∞—è
                        if doctor.clinic != target_branch and target_branch is not None:
                            doctor.clinic = target_branch
                        doctor.save()
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –¥–æ–∫—Ç–æ—Ä–∞: {doctor_code} ‚Üí {doctor_name}")
                    elif created:
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—Ç–æ—Ä: {doctor_code} - {doctor_name}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞
                    depnum_element = queue_info.find("ns:DEPNUM", namespace)
                    depname_element = queue_info.find("ns:DEPNAME", namespace)

                    if depnum_element is not None and depnum_element.text:
                        dep_id = int(depnum_element.text)
                        dep_name = depname_element.text if depname_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"

                        # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
                        department, dept_created = Department.objects.get_or_create(
                            department_id=dep_id,
                            defaults={
                                "name": dep_name,
                                "clinic": target_branch  # –í–ê–ñ–ù–û: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ü–µ–ª–µ–≤–æ–π –∫–ª–∏–Ω–∏–∫–µ
                            }
                        )

                        if not dept_created and department.name != dep_name:
                            department.name = dep_name
                            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥—Ä—É–≥–∞—è
                            if department.clinic != target_branch and target_branch is not None:
                                department.clinic = target_branch
                            department.save()
                            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {dep_id} ‚Üí {dep_name}")
                        elif dept_created:
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {dep_id} - {dep_name}")

                        # –°–≤—è–∑—ã–≤–∞–µ–º –¥–æ–∫—Ç–æ—Ä–∞ —Å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º
                        if doctor.department != department:
                            doctor.department = department
                            doctor.save()
                            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—Ç–æ—Ä–∞ {doctor_name}: {department.name}")

                with transaction.atomic():
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    try:
                        patient = Patient.objects.get(patient_code=patient_code)
                    except Patient.DoesNotExist:
                        # –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
                        patient = Patient.objects.create(
                            patient_code=patient_code,
                            full_name=f"–ü–∞—Ü–∏–µ–Ω—Ç {patient_code}"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                        )
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å –∫–æ–¥–æ–º {patient_code}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –∫–ª–∏–Ω–∏–∫–∏
                    existing_appointments = Appointment.objects.filter(
                        patient=patient,
                        is_active=True,
                        clinic=target_branch if target_branch else None
                    )

                    # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –∫–ª–∏–Ω–∏–∫—É
                    for appointment in existing_appointments:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤–æ–π
                        if appointment.clinic != target_branch and target_branch is not None:
                            appointment.clinic = target_branch
                            appointment.save()
                            logger.info(
                                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∏–Ω–∏–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ {appointment.appointment_id} –Ω–∞ {target_branch.name}")

                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏
                    queue_data = {
                        "patient": patient,
                        "contact_start_date": contact_bdate,
                        "contact_end_date": contact_fdate,
                        "reason": reason,
                        "branch": None,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
                        "target_branch": target_branch,  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¶–µ–ª–µ–≤–æ–π —Ñ–∏–ª–∏–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è MSH.99
                        "current_state": current_state,
                        "desired_start_date": action_bdate,
                        "desired_end_date": action_fdate,
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—Ç–æ—Ä–µ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if doctor_code_element is not None and doctor_code_element.text:
                        queue_data["doctor_code"] = int(doctor_code_element.text)
                        queue_data["doctor_name"] = doctor_name

                    if depnum_element is not None and depnum_element.text:
                        queue_data["department_number"] = int(depnum_element.text)
                        queue_data[
                            "department_name"] = depname_element.text if depname_element is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"

                    queue_entry, created = QueueInfo.objects.update_or_create(
                        queue_id=queue_id,
                        defaults=queue_data
                    )

                    if created:
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.patient_code}")
                    else:
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å: {queue_id} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.patient_code}")

                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–µ –∏ —Ñ–∏–ª–∏–∞–ª–∞—Ö —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
                    logger.info(f"üìã –ó–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_id}")
                    logger.info(f"  –ü–∞—Ü–∏–µ–Ω—Ç: {patient.full_name} (ID: {patient.patient_code})")
                    logger.info(f"  –ü—Ä–∏—á–∏–Ω–∞: {reason.reason_name if reason else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                    logger.info(
                        f"  TOFILIAL: {target_branch.name} (ID: {target_branch.clinic_id}) - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ MSH.99" if target_branch else "‚ö† TOFILIAL –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                    logger.info(f"  –î–æ–∫—Ç–æ—Ä: {doctor.full_name} (ID: {doctor.doctor_code}) –µ—Å–ª–∏ –µ—Å—Ç—å")
                    logger.info(f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

            except Exception as inner_error:
                logger.error(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –æ—á–µ—Ä–µ–¥–∏: {inner_error}")

    except Exception as e:
        logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XML: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
if __name__ == "__main__":
    get_queue()
