import os
import django
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

from dotenv import load_dotenv
from datetime import datetime
from reminder.models import *
from reminder.infoclinica_requests.utils import generate_msh_10
from django.utils.dateparse import parse_date
from django.db import transaction

import requests
import logging
import xml.etree.ElementTree as ET
import pytz
from datetime import datetime, timedelta

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')
infoclinica_x_forwarded_host = os.getenv('INFOCLINICA_HOST')
# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, 'certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')


def web_reference():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–∏—á–∏–Ω –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å (WEB_SCHQUEUE_ADDTYPES)
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        ts_1 = datetime.now().strftime("%Y%m%d%H%M%S")
        msh_10 = generate_msh_10()

        # –§–æ—Ä–º–∏—Ä—É–µ–º XML-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        xml_request = f'''
        <WEB_REFERENCE xmlns="http://sdsys.ru/" xmlns:tns="http://sdsys.ru/">
          <MSH>
            <MSH.7>
              <TS.1>{ts_1}</TS.1>
            </MSH.7>
            <MSH.9>
              <MSG.1>WEB</MSG.1>
              <MSG.2>REFERENCE</MSG.2>
            </MSH.9>
            <MSH.10>{msh_10}</MSH.10>
            <MSH.18>UTF-8</MSH.18>
          </MSH>
          <REFERENCE_IN>
            <REFCODE>WEB_SCHQUEUE_ADDTYPES</REFCODE>
          </REFERENCE_IN>
        </WEB_REFERENCE>
        '''

        logger.info(
            f"\n\n---------------\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ REFERENCE –¥–ª—è WEB_SCHQUEUE_ADDTYPES: \n{xml_request}\n---------------\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url=infoclinica_api_url,
            headers={'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}', 'Content-Type': 'text/xml'},
            data=xml_request,
            cert=(cert_file_path, key_file_path),
            verify=True
        )

        if response.status_code == 200:
            logger.info(f"\n\n---------------\n–û—Ç–≤–µ—Ç –æ—Ç REFERENCE: {response.text}\n---------------\n")
            parse_reference_response(response.text)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {response.text}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ web_reference: {e}")


def parse_reference_response(xml_response):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç –æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∏
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª–∏ QueueReason.
    """
    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        sp_result = root.find(".//ns:SPRESULT", namespace)
        if sp_result is None or sp_result.text != "1":
            sp_comment = root.find(".//ns:SPCOMMENT", namespace)
            error_msg = sp_comment.text if sp_comment is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {error_msg}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        records = root.findall(".//ns:REC", namespace)
        if not records:
            logger.warning("‚ö† –í –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ (REC)")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {len(records)}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        with transaction.atomic():
            for rec in records:
                rec_id_elem = rec.find("ns:RECID", namespace)
                rec_name_elem = rec.find("ns:RECNAME", namespace)

                if rec_id_elem is None or rec_name_elem is None:
                    logger.warning("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –±–µ–∑ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    continue

                rec_id = int(rec_id_elem.text)
                rec_name = rec_name_elem.text.strip()

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º QueueReason
                reason, created = QueueReason.objects.update_or_create(
                    reason_id=rec_id,
                    defaults={"reason_name": rec_name}
                )

                if created:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {rec_id} - {rec_name}")
                else:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–∏—á–∏–Ω–∞: {rec_id} - {rec_name}")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫–æ–¥–∞–º–∏
        create_reason_mappings()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {e}")


def create_reason_mappings():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏–∑ –ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫–æ–¥–∞–º–∏.
    """
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    REASON_MAPPINGS = [
        # –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ò–Ω—Ñ–æ–∫–ª–∏–Ω–∏–∫–∏
        {'add_id': 1, 'internal_code': '0PP0profilac', 'internal_name': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏'},
        # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä
        {'add_id': 4, 'internal_code': '00PP0consulta', 'internal_name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'},  # –ñ–µ–ª–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        {'add_id': 5, 'internal_code': '00PP0prodolzhenie', 'internal_name': '–õ–µ—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'},
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–µ—á–µ–Ω–∏–µ
        {'add_id': 6, 'internal_code': '00PP0consulta', 'internal_name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'},  # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        {'add_id': 8, 'internal_code': '0PP0profilac', 'internal_name': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏'},  # –î–∏—Å–ø–∞–Ω—Å–µ—Ä–∏–∑–∞—Ü–∏—è
        {'add_id': 100000, 'internal_code': '00PP0consulta', 'internal_name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'},  # –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        {'add_id': 111111, 'internal_code': '00PP0rabota', 'internal_name': '–°–¥–∞—á–∞ —Ä–∞–±–æ—Ç—ã'},
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Ä–µ–∑-—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        {'add_id': 111113, 'internal_code': '0PP0adapta', 'internal_name': '–ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∏–∑–∏—Ç'},  # –ò–∑ –ø—Ä–∏–º–µ—Ä–∞ API

        # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã
        {'add_id': -1, 'internal_code': '0PP00plomba', 'internal_name': '–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–æ–º–±–∞'},
        # –î–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —è–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
        {'add_id': 2, 'internal_code': '0PP0coronca', 'internal_name': '–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä–æ–Ω–∫–∞'},
        {'add_id': 3, 'internal_code': '00PP0ydalenie', 'internal_name': '–£–¥–∞–ª–µ–Ω–∏–µ'},
        {'add_id': 7, 'internal_code': '0PP0neprishol', 'internal_name': '–ü–µ—Ä–≤–∏—á–Ω—ã–π –Ω–µ –ø—Ä–∏—à—ë–ª –Ω–∞ –ø—Ä–∏—ë–º'},
        {'add_id': 9, 'internal_code': '0PP0osmotrnarcoz', 'internal_name': '–û—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ –Ω–∞—Ä–∫–æ–∑–∞'},
        {'add_id': 10, 'internal_code': '0PP0consimp1',
         'internal_name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è 1 —ç—Ç–∞–ø'},
        {'add_id': 11, 'internal_code': '0PP0consimp2',
         'internal_name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è 2 —ç—Ç–∞–ø'},
        {'add_id': 12, 'internal_code': '00PP0protez', 'internal_name': '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ'},
        {'add_id': 13, 'internal_code': '00PP0gigiena', 'internal_name': '–ì–∏–≥–∏–µ–Ω–∞ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞'},
        {'add_id': 14, 'internal_code': '00PP0narcoz', 'internal_name': '–ù–∞—Ä–∫–æ–∑'},
        {'add_id': 15, 'internal_code': '0PP0ortodet', 'internal_name': '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ –¥–æ 18'},
        {'add_id': 16, 'internal_code': '0PP0ortodont', 'internal_name': '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ 18+'},
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    for mapping in REASON_MAPPINGS:
        try:
            reason = QueueReason.objects.get(reason_id=mapping['add_id'])
            mapping_obj, created = QueueReasonMapping.objects.update_or_create(
                reason=reason,
                defaults={
                    'internal_code': mapping['internal_code'],
                    'internal_name': mapping['internal_name']
                }
            )

            if created:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã {reason.reason_name}: {mapping['internal_code']}")
            else:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã {reason.reason_name}: {mapping['internal_code']}")

        except QueueReason.DoesNotExist:
            logger.warning(f"‚ö† –ü—Ä–∏—á–∏–Ω–∞ —Å ID {mapping['add_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ID {mapping['add_id']}: {e}")


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—á–µ—Ä–µ–¥–∏...")
    web_reference()
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
