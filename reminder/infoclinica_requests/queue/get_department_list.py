import os
import django
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

from dotenv import load_dotenv
from datetime import datetime
from reminder.models import *
from reminder.utils.utils import generate_msh_10
from django.utils.dateparse import parse_date
from django.db import transaction

import requests
import logging
import xml.etree.ElementTree as ET
import pytz
from datetime import datetime, timedelta

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
infoclinica_api_url = os.getenv('INFOCLINICA_BASE_URL')
infoclinica_x_forwarded_host = os.getenv('INFOCLINICA_HOST')

# –ü—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
base_dir = os.path.dirname(os.path.abspath(__file__))
certs_dir = os.path.join(base_dir, '../old_integration/certs')
os.makedirs(certs_dir, exist_ok=True)
cert_file_path = os.path.join(certs_dir, 'cert.pem')
key_file_path = os.path.join(certs_dir, 'key.pem')


def get_departement_list():
    """
    –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞
    """
    try:
        ts_1 = datetime.now().strftime("%Y%m%d%H%M%S")
        msh_10 = generate_msh_10()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï queue_id –∏ patient_code –∏–∑ QueueInfo
        queue_entries = Clinic.objects.all().values_list("clinic_id", flat=True)

        if not queue_entries:
            logger.info("‚ùó –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ QueueInfo: {len(queue_entries)}")

        for clinic_id in queue_entries:
            if not clinic_id:
                logger.warning(f"‚ö† –û—á–µ—Ä–µ–¥—å {clinic_id} –Ω–µ –∏–º–µ–µ—Ç `patient_code`, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º XML-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            xml_request = f'''
            <WEB_GET_DEPARTMENT_LIST xmlns="http://sdsys.ru/" xmlns:tns="http://sdsys.ru/">
              <MSH>

                <MSH.7>
                  <TS.1>{ts_1}</TS.1>
                </MSH.7>

                <MSH.9>
                  <MSG.1>WEB</MSG.1>
                  <MSG.2>GET_DEPARTMENT_LIST</MSG.2>
                </MSH.9>
                <MSH.10>{msh_10}</MSH.10>
                <MSH.18>UTF-8</MSH.18>
              </MSH>
              <GET_DEPARTMENT_LIST_IN>
                <FILLIST>{clinic_id}</FILLIST> <!-- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ñ–∏–ª–∏–∞–ª–∞–º –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è -->
                <VIEWINWEB>-1</VIEWINWEB> <!--–î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö CRM-—Å–∏—Å—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è -1 -->
              </GET_DEPARTMENT_LIST_IN>
            </WEB_GET_DEPARTMENT_LIST>
            '''

            logger.info(
                f"\n\n---------------\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ CLIENT_INFO –¥–ª—è PCODE {clinic_id}: \n{xml_request}\n---------------\n")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                url=infoclinica_api_url,
                headers={'X-Forwarded-Host': f'{infoclinica_x_forwarded_host}', 'Content-Type': 'text/xml'},
                data=xml_request,
                cert=(cert_file_path, key_file_path),
                verify=True
            )

            if response.status_code == 200:
                logger.info(
                    f"\n\n---------------\n–û—Ç–≤–µ—Ç –æ—Ç CLIENT_INFO –¥–ª—è PCODE {clinic_id}: {response.text}\n---------------\n")
                print_departments(response.text)
                save_departments_to_db(response.text)

            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–ª–∏–∞–ª–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_queue: {e}")


def print_departments(xml_response):
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏–∑ XML-–æ—Ç–≤–µ—Ç–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    import xml.etree.ElementTree as ET

    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ò—â–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
        departments = root.findall(".//ns:GET_DEPARTMENT_LIST_OUT/ns:GETDEPARTMENTLIST", namespace)
        if not departments:
            print("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return

        print(f"\n{'=' * 80}")
        print(f"–°–ü–ò–°–û–ö –û–¢–î–ï–õ–ï–ù–ò–ô (–≤—Å–µ–≥–æ {len(departments)}):")
        print(f"{'=' * 80}")

        for dept in departments:
            dept_id = dept.find("ns:DEPNUM", namespace).text
            dept_name = dept.find("ns:DEPNAME", namespace).text if dept.find("ns:DEPNAME",
                                                                             namespace) is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ì—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π
            group_elem = dept.find("ns:DEPGRPNAME", namespace)
            group_name = group_elem.text if group_elem is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            # –í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
            viewinweb_elem = dept.find("ns:VIEWINWEB_OUT", namespace)
            viewinweb = "–î–∞" if viewinweb_elem is not None and viewinweb_elem.text == "1" else "–ù–µ—Ç"

            # –ú–µ–¥–∏–∞ ID
            media_elem = dept.find("ns:MEDIAID", namespace)
            media_id = media_elem.text if media_elem is not None else "–ù–µ—Ç"

            # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
            favorite_elem = dept.find("ns:ISFAVORITE", namespace)
            is_favorite = "–î–∞" if favorite_elem is not None and favorite_elem.text == "1" else "–ù–µ—Ç"

            print(f"\n{'-' * 80}")
            print(f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ ID: {dept_id} | {dept_name}")
            print(f"–ì—Ä—É–ø–ø–∞: {group_name}")
            print(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ: {viewinweb}")
            print(f"–ú–µ–¥–∏–∞ ID: {media_id}")
            print(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {is_favorite}")

        print(f"\n{'=' * 80}\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö: {e}")


def save_departments_to_db(xml_response, clinic_id=None):
    """
    –ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    xml_response - XML-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    clinic_id - ID –∫–ª–∏–Ω–∏–∫–∏ (—Ñ–∏–ª–∏–∞–ª–∞), –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å—è—Ç—Å—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    """
    import xml.etree.ElementTree as ET
    from django.db import transaction
    from reminder.models import Department, Clinic

    try:
        root = ET.fromstring(xml_response)
        namespace = {'ns': 'http://sdsys.ru/'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        msa_element = root.find(".//ns:MSA/ns:MSA.1", namespace)
        if msa_element is None or msa_element.text != "AA":
            print("‚ùó –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
            return 0, 0

        # –ò—â–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
        departments = root.findall(".//ns:GET_DEPARTMENT_LIST_OUT/ns:GETDEPARTMENTLIST", namespace)
        if not departments:
            print("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return 0, 0

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–Ω–∏–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
        clinic = None
        if clinic_id:
            try:
                clinic = Clinic.objects.get(clinic_id=clinic_id)
            except Clinic.DoesNotExist:
                print(f"‚ö†Ô∏è –ö–ª–∏–Ω–∏–∫–∞ —Å ID {clinic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        created_count = 0
        updated_count = 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with transaction.atomic():
            for dept in departments:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                dept_id = int(dept.find("ns:DEPNUM", namespace).text)
                dept_name_elem = dept.find("ns:DEPNAME", namespace)
                dept_name = dept_name_elem.text if dept_name_elem is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                dept_data = {
                    'name': dept_name,
                    'clinic': clinic,  # –°–≤—è–∑—å —Å –∫–ª–∏–Ω–∏–∫–æ–π
                }

                # –ì—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π
                group_elem = dept.find("ns:DEPGRPNAME", namespace)
                if group_elem is not None:
                    dept_data['group_name'] = group_elem.text

                # –í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ
                viewinweb_elem = dept.find("ns:VIEWINWEB_OUT", namespace)
                if viewinweb_elem is not None:
                    dept_data['view_in_web'] = viewinweb_elem.text == "1"

                # –ú–µ–¥–∏–∞ ID
                media_elem = dept.find("ns:MEDIAID", namespace)
                if media_elem is not None:
                    dept_data['media_id'] = media_elem.text

                # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                favorite_elem = dept.find("ns:ISFAVORITE", namespace)
                if favorite_elem is not None:
                    dept_data['is_favorite'] = favorite_elem.text == "1"

                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                comment_elem = dept.find("ns:COMMENT", namespace)
                if comment_elem is not None:
                    dept_data['comment'] = comment_elem.text

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                department, created = Department.objects.update_or_create(
                    department_id=dept_id,
                    defaults=dept_data
                )

                if created:
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {dept_id} - {dept_name}")
                else:
                    updated_count += 1
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {dept_id} - {dept_name}")

        clinic_info = f" –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏ {clinic.name} (ID: {clinic_id})" if clinic else ""
        print(f"üíæ –ò—Ç–æ–≥–æ{clinic_info}: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –æ—Ç–¥–µ–ª–µ–Ω–∏–π")
        return created_count, updated_count

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –≤ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return 0, 0


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
if __name__ == "__main__":
    get_departement_list()
