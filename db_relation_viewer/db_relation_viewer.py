import os
import django
import pandas as pd
from tabulate import tabulate
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'president_final.settings')
django.setup()

from reminder.models import Patient, Doctor, Clinic, Department, Appointment, QueueInfo


def format_date(date_obj):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not date_obj:
        return "‚Äî"
    if isinstance(date_obj, datetime):
        return date_obj.strftime("%d.%m.%Y %H:%M")
    return date_obj.strftime("%d.%m.%Y")


class DBRelationshipViewer:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    @staticmethod
    def show_patient_info(patient_code=None, full_name=None, limit=10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –∏ –µ–≥–æ —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏"""

        query = Patient.objects.all()
        if patient_code:
            query = query.filter(patient_code=patient_code)
        if full_name:
            query = query.filter(full_name__icontains=full_name)

        patients = query.order_by('patient_code')[:limit]

        if not patients:
            print(f"‚ùå –ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print(f"\n{'=' * 80}")
        print(f"–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–¶–ò–ï–ù–¢–ê–• (–Ω–∞–π–¥–µ–Ω–æ: {len(patients)})")
        print(f"{'=' * 80}")

        for patient in patients:
            print(f"\n{'-' * 80}")
            print(f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient.full_name} (ID: {patient.patient_code})")
            print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient.phone_mobile or '‚Äî'}")
            print(f"üìß Email: {patient.email or '‚Äî'}")
            print(f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {format_date(patient.birth_date) if patient.birth_date else '‚Äî'}")
            print(f"‚öß –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if patient.gender == 1 else '–ñ–µ–Ω—Å–∫–∏–π' if patient.gender == 2 else '‚Äî'}")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á–∞–º
            appointments = Appointment.objects.filter(patient=patient, is_active=True).order_by('-start_time')
            if appointments:
                print(f"\nüìÖ –ó–ê–ü–ò–°–ò –ù–ê –ü–†–ò–ï–ú (–∞–∫—Ç–∏–≤–Ω—ã–µ):")
                for app in appointments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    doctor_name = app.doctor.full_name if app.doctor else "‚Äî"
                    clinic_name = app.clinic.name if app.clinic else "‚Äî"
                    dept_name = app.department.name if app.department else "‚Äî"
                    print(f"  ‚Ä¢ {format_date(app.start_time)} ‚Üí {doctor_name} | {clinic_name} | {dept_name}")

                if len(appointments) > 5:
                    print(f"    ... –∏ –µ—â–µ {len(appointments) - 5} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("\nüìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö
            queues = QueueInfo.objects.filter(patient=patient).order_by('-created_at')
            if queues:
                print(f"\nüîÑ –û–ß–ï–†–ï–î–ò:")
                for queue in queues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                    reason = queue.reason.reason_name if queue.reason else "‚Äî"
                    branch = queue.branch.name if queue.branch else "‚Äî"
                    target = queue.target_branch.name if queue.target_branch else "‚Äî"
                    status = f"{queue.current_state_name} ({queue.current_state})" if queue.current_state_name else "‚Äî"
                    print(f"  ‚Ä¢ Queue {queue.queue_id} | {reason} | {branch} ‚Üí {target} | {status}")

                if len(queues) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(queues) - 3} –æ—á–µ—Ä–µ–¥–µ–π")
            else:
                print("\nüîÑ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö")

    @staticmethod
    def show_doctor_patients(doctor_code=None, doctor_name=None, limit=20):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞"""
        query = Doctor.objects.all()
        if doctor_code:
            query = query.filter(doctor_code=doctor_code)
        if doctor_name:
            query = query.filter(full_name__icontains=doctor_name)

        doctors = query.order_by('doctor_code')[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –≤—Ä–∞—á–µ–π

        if not doctors:
            print(f"‚ùå –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for doctor in doctors:
            print(f"\n{'=' * 80}")
            print(f"üë®‚Äç‚öïÔ∏è –í–†–ê–ß: {doctor.full_name} (ID: {doctor.doctor_code})")
            if doctor.department:
                print(f"üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {doctor.department.name}")
            if doctor.clinic:
                print(f"üè• –ö–ª–∏–Ω–∏–∫–∞: {doctor.clinic.name}")
            print(f"{'=' * 80}")

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            appointments = Appointment.objects.filter(doctor=doctor, is_active=True).order_by('-start_time')[:limit]

            if not appointments:
                print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É")
                continue

            print(f"\n–ü–ê–¶–ò–ï–ù–¢–´ –° –ê–ö–¢–ò–í–ù–´–ú–ò –ó–ê–ü–ò–°–Ø–ú–ò (–≤—Å–µ–≥–æ: {len(appointments)}):")
            for idx, app in enumerate(appointments, 1):
                date_str = format_date(app.start_time)
                print(f"{idx}. {app.patient.full_name} (ID: {app.patient.patient_code}) | {date_str}")

    @staticmethod
    def show_clinic_structure(clinic_id=None, clinic_name=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∏–Ω–∏–∫–∏: –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∏ –≤—Ä–∞—á–µ–π"""
        query = Clinic.objects.all()
        if clinic_id:
            query = query.filter(clinic_id=clinic_id)
        if clinic_name:
            query = query.filter(name__icontains=clinic_name)

        clinics = query.order_by('clinic_id')[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∫–ª–∏–Ω–∏–∫

        if not clinics:
            print(f"‚ùå –ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for clinic in clinics:
            print(f"\n{'=' * 80}")
            print(f"üè• –ö–õ–ò–ù–ò–ö–ê: {clinic.name} (ID: {clinic.clinic_id})")
            print(f"üìç –ê–¥—Ä–µ—Å: {clinic.address or '‚Äî'}")
            print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {clinic.phone or '‚Äî'}")
            print(f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: GMT+{clinic.timezone}")
            print(f"{'=' * 80}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
            departments = Department.objects.filter(clinic=clinic).order_by('name')

            if not departments:
                print("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö")
            else:
                print(f"\nüè¢ –û–¢–î–ï–õ–ï–ù–ò–Ø (–≤—Å–µ–≥–æ: {departments.count()}):")

                for dept in departments:
                    print(f"\n{'-' * 70}")
                    print(f"  ‚Ä¢ {dept.name} (ID: {dept.department_id})")

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–µ–π —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
                    doctors = Doctor.objects.filter(department=dept).order_by('full_name')

                    if doctors:
                        print(f"    üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏ ({doctors.count()}):")
                        for doctor in doctors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 10 –≤—Ä–∞—á–µ–π
                            print(f"      - {doctor.full_name} (ID: {doctor.doctor_code})")

                        if doctors.count() > 10:
                            print(f"        ... –∏ –µ—â–µ {doctors.count() - 10} –≤—Ä–∞—á–µ–π")
                    else:
                        print(f"    üë®‚Äç‚öïÔ∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π")

    @staticmethod
    def generate_summary_report():
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\n{'=' * 80}")
        print(f"–°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print(f"{'=' * 80}")

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            "–ü–∞—Ü–∏–µ–Ω—Ç—ã": Patient.objects.count(),
            "–í—Ä–∞—á–∏": Doctor.objects.count(),
            "–ö–ª–∏–Ω–∏–∫–∏": Clinic.objects.count(),
            "–û—Ç–¥–µ–ª–µ–Ω–∏—è": Department.objects.count(),
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏": Appointment.objects.filter(is_active=True).count(),
            "–û—á–µ—Ä–µ–¥–∏": QueueInfo.objects.count()
        }

        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            print(f"{key}: {value}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º:")
        clinics = Clinic.objects.all()

        clinic_data = []
        for clinic in clinics:
            doctors_count = Doctor.objects.filter(clinic=clinic).count()
            departments_count = Department.objects.filter(clinic=clinic).count()
            appointments_count = Appointment.objects.filter(clinic=clinic, is_active=True).count()

            clinic_data.append({
                "ID": clinic.clinic_id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": clinic.name,
                "–û—Ç–¥–µ–ª–µ–Ω–∏—è": departments_count,
                "–í—Ä–∞—á–∏": doctors_count,
                "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏": appointments_count
            })

        # –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        if clinic_data:
            df = pd.DataFrame(clinic_data)
            print(tabulate(df, headers='keys', tablefmt='grid', showindex=False))
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–Ω–∏–∫–∞—Ö")


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    viewer = DBRelationshipViewer()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    viewer.generate_summary_report()

    # 1. –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Å–≤—è–∑–µ–π (–ø–æ –∫–æ–¥—É –∏–ª–∏ –∏–º–µ–Ω–∏)
    viewer.show_patient_info(patient_code=990000612)
    viewer.show_patient_info(full_name="–ò–≤–∞–Ω–æ–≤")

    # 2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
    # viewer.show_doctor_patients(doctor_code=123)
    # viewer.show_doctor_patients(doctor_name="–ü–µ—Ç—Ä–æ–≤")

    # 3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∏–Ω–∏–∫–∏
    # viewer.show_clinic_structure(clinic_id=1)
    # viewer.show_clinic_structure(clinic_name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è")
